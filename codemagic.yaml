workflows:
  unity-ios:
    name: Unity iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - apple_credentials  # Store Apple Developer credentials in Codemagic
    triggering:
      events:
        - push
    scripts:
      - name: Install Unity Hub
        script: |
          brew tap homebrew/cask
          brew install --cask unity-hub

      - name: Install gdown
        script: |
          pip install gdown

      - name: Download Unity Installer
        script: |
          FILE_ID="1aE3ZRPxFW7C-B9IeM4-tu4l96K-6w7B2"
          FILE_NAME="Unity-6000.0.32f1.pkg"

          # Download using gdown
          gdown --id $FILE_ID -O $FILE_NAME

          # Verify the downloaded file
          if [ -f $FILE_NAME ]; then
            echo "Unity installer downloaded successfully."
            ls -lh $FILE_NAME  # Check file size
            file $FILE_NAME  # Check file type
          else
            echo "Failed to download Unity installer."
            exit 1
          fi

      - name: Install Unity
        script: |
          FILE_NAME="Unity-6000.0.32f1.pkg"

          if [ -f $FILE_NAME ]; then
            echo "Installing Unity..."
            chmod +x $FILE_NAME  # Ensure it has execution permission
            sudo installer -pkg $FILE_NAME -target / -verbose
            if [ $? -eq 0 ]; then
              echo "Unity installed successfully."
            else
              echo "Unity installation failed. Check installer logs for details."
              tail -n 50 /var/log/install.log | grep Unity
              exit 1
            fi
          else
            echo "Unity installer package not found."
            exit 1
          fi

      - name: Verify Unity Installation
        script: |
          echo "Checking Unity installation path..."
          find /Applications -name "Unity.app"

      - name: Activate Unity License
        script: |
          echo "Activating Unity license..."
          /Applications/Unity/Unity.app/Contents/MacOS/Unity \
          -quit -batchmode -nographics \
          -manualLicenseFile ./Licenses/Unity_lic.ulf \
          -logFile license_activation.log
          if [ $? -eq 0 ]; then
            echo "Unity license activated successfully."
          else
            echo "Unity license activation failed. Check license_activation.log for details."
            exit 1
          fi

      - name: Print License Activation Log
        script: |
          if [ -f license_activation.log ]; then
            echo "License activation log:"
            cat license_activation.log
          else
            echo "License activation log file not found."
          fi

      - name: Build Unity project
        script: |
          echo "Starting Unity build..."
          /Applications/Unity/Unity.app/Contents/MacOS/Unity \
          -quit -batchmode -nographics -executeMethod BuildScript.BuildiOS \
          -projectPath . -logFile build.log
          if [ $? -eq 0 ]; then
            echo "Unity build succeeded."
            cat build.log  # Print the build log for debugging
          else
            echo "Unity build failed. Check build.log for details."
            cat build.log
            exit 1
          fi

      - name: Build Xcode project
        script: |
          mkdir -p $HOME/build  # Ensure the archive directory exists
          echo "Building Xcode project..."
          xcodebuild -project Unity-iPhone.xcodeproj \
          -scheme Unity-iPhone \
          -sdk iphoneos \
          -configuration Release \
          archive -archivePath $HOME/build/YourGame.xcarchive | tee xcodebuild.log
          if [ $? -eq 0 ]; then
            echo "Xcode build succeeded."
          else
            echo "Xcode build failed. Check xcodebuild.log for details."
            exit 1
          fi

      - name: Export .ipa File
        script: |
          xcodebuild -exportArchive \
          -archivePath $HOME/build/YourGame.xcarchive \
          -exportPath $HOME/build \
          -exportOptionsPlist ExportOptions.plist
